import { OnInit } from '@angular/core';
import { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';
import { AtpCoreService } from '../atp-core.service';
import { ITime } from '../definitions';
import * as ɵngcc0 from '@angular/core';
export declare class TimePickerComponent implements OnInit {
    private core;
    _ref: any;
    subject: any;
    activeModal: boolean;
    timerElement: any;
    clockObject: Array<any>;
    isClicked: boolean;
    clockType: 'minute' | 'hour';
    time: ITime;
    nowTime: any;
    degree: any;
    config: TimePickerConfig;
    appRef: any;
    isPopup: boolean;
    allowed: any;
    preference: IDisplayPreference;
    changeToMin: boolean;
    private animationTime;
    constructor(core: AtpCoreService);
    ParseStringToTime(time: string): void;
    GetTime(): void;
    clockMaker: () => void;
    setActiveTime: () => void;
    setArrow: (obj: any) => void;
    rotationClass: (degrees: any) => void;
    setTime(): void;
    getDegree: (ele: any) => void;
    private GetNowTime(hour, ampm, minute);
    checkBet(): void;
    modalAnimation(): void;
    ngOnInit(): void;
    MinuteClick(): boolean;
    HourClick(): boolean;
    ChangeAnimational(type: 'minute' | 'hour'): void;
    SetAM(): boolean;
    SetPM(): boolean;
    Close(e: any): void;
    getClockArrowStyle(): {};
    getAnimationTime(): string;
    /**
     * Event on clock mouse click down
     * @param event - captured event
     */
    updateClockDown(event: any): void;
    setNewRotation(): void;
    GetSeparator(): string;
    GetPeriod(period: 'AM' | 'PM'): any;
    GetMinute(): any;
    GetHour(): any;
    GetClockTime(clock: IClockNumber): any;
    GetLabel(key: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimePickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimePickerComponent, "time-picker", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWUtcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNsb2NrTnVtYmVyLCBJRGlzcGxheVByZWZlcmVuY2UsIFRpbWVQaWNrZXJDb25maWcgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBBdHBDb3JlU2VydmljZSB9IGZyb20gJy4uL2F0cC1jb3JlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVRpbWUgfSBmcm9tICcuLi9kZWZpbml0aW9ucyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIGNvcmU7XG4gICAgX3JlZjogYW55O1xuICAgIHN1YmplY3Q6IGFueTtcbiAgICBhY3RpdmVNb2RhbDogYm9vbGVhbjtcbiAgICB0aW1lckVsZW1lbnQ6IGFueTtcbiAgICBjbG9ja09iamVjdDogQXJyYXk8YW55PjtcbiAgICBpc0NsaWNrZWQ6IGJvb2xlYW47XG4gICAgY2xvY2tUeXBlOiAnbWludXRlJyB8ICdob3VyJztcbiAgICB0aW1lOiBJVGltZTtcbiAgICBub3dUaW1lOiBhbnk7XG4gICAgZGVncmVlOiBhbnk7XG4gICAgY29uZmlnOiBUaW1lUGlja2VyQ29uZmlnO1xuICAgIGFwcFJlZjogYW55O1xuICAgIGlzUG9wdXA6IGJvb2xlYW47XG4gICAgYWxsb3dlZDogYW55O1xuICAgIHByZWZlcmVuY2U6IElEaXNwbGF5UHJlZmVyZW5jZTtcbiAgICBjaGFuZ2VUb01pbjogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFuaW1hdGlvblRpbWU7XG4gICAgY29uc3RydWN0b3IoY29yZTogQXRwQ29yZVNlcnZpY2UpO1xuICAgIFBhcnNlU3RyaW5nVG9UaW1lKHRpbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgR2V0VGltZSgpOiB2b2lkO1xuICAgIGNsb2NrTWFrZXI6ICgpID0+IHZvaWQ7XG4gICAgc2V0QWN0aXZlVGltZTogKCkgPT4gdm9pZDtcbiAgICBzZXRBcnJvdzogKG9iajogYW55KSA9PiB2b2lkO1xuICAgIHJvdGF0aW9uQ2xhc3M6IChkZWdyZWVzOiBhbnkpID0+IHZvaWQ7XG4gICAgc2V0VGltZSgpOiB2b2lkO1xuICAgIGdldERlZ3JlZTogKGVsZTogYW55KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgR2V0Tm93VGltZShob3VyLCBhbXBtLCBtaW51dGUpO1xuICAgIGNoZWNrQmV0KCk6IHZvaWQ7XG4gICAgbW9kYWxBbmltYXRpb24oKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIE1pbnV0ZUNsaWNrKCk6IGJvb2xlYW47XG4gICAgSG91ckNsaWNrKCk6IGJvb2xlYW47XG4gICAgQ2hhbmdlQW5pbWF0aW9uYWwodHlwZTogJ21pbnV0ZScgfCAnaG91cicpOiB2b2lkO1xuICAgIFNldEFNKCk6IGJvb2xlYW47XG4gICAgU2V0UE0oKTogYm9vbGVhbjtcbiAgICBDbG9zZShlOiBhbnkpOiB2b2lkO1xuICAgIGdldENsb2NrQXJyb3dTdHlsZSgpOiB7fTtcbiAgICBnZXRBbmltYXRpb25UaW1lKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFdmVudCBvbiBjbG9jayBtb3VzZSBjbGljayBkb3duXG4gICAgICogQHBhcmFtIGV2ZW50IC0gY2FwdHVyZWQgZXZlbnRcbiAgICAgKi9cbiAgICB1cGRhdGVDbG9ja0Rvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc2V0TmV3Um90YXRpb24oKTogdm9pZDtcbiAgICBHZXRTZXBhcmF0b3IoKTogc3RyaW5nO1xuICAgIEdldFBlcmlvZChwZXJpb2Q6ICdBTScgfCAnUE0nKTogYW55O1xuICAgIEdldE1pbnV0ZSgpOiBhbnk7XG4gICAgR2V0SG91cigpOiBhbnk7XG4gICAgR2V0Q2xvY2tUaW1lKGNsb2NrOiBJQ2xvY2tOdW1iZXIpOiBhbnk7XG4gICAgR2V0TGFiZWwoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG4iXX0=