import { OnInit, OnDestroy, AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { DrakeStoreService } from '../services/drake-store.service';
/**
 * Makes the container droppable and children draggable.
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';
export declare class DroppableDirective implements OnInit, OnDestroy, AfterViewInit {
    private el;
    private renderer;
    private drakesService;
    model: any;
    copy: boolean;
    removeOnSpill: boolean;
    ngxDroppable: string;
    direction: 'vertical' | 'horizontal' | 'mixed';
    drop: EventEmitter<any>;
    drag: EventEmitter<any>;
    over: EventEmitter<any>;
    out: EventEmitter<any>;
    remove: EventEmitter<any>;
    cancel: EventEmitter<any>;
    readonly container: any;
    dropZone: string;
    defaultZone: string;
    _dropZone: string;
    constructor(el: ElementRef, renderer: Renderer2, drakesService: DrakeStoreService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DroppableDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DroppableDirective, "[ngxDroppable]", never, { "copy": "copy"; "removeOnSpill": "removeOnSpill"; "direction": "direction"; "dropZone": "dropZone"; "model": "model"; "ngxDroppable": "ngxDroppable"; }, { "drop": "drop"; "drag": "drag"; "over": "over"; "out": "out"; "remove": "remove"; "cancel": "cancel"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyb3BwYWJsZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibmd4LWRyb3BwYWJsZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHJha2VTdG9yZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kcmFrZS1zdG9yZS5zZXJ2aWNlJztcbi8qKlxuICogTWFrZXMgdGhlIGNvbnRhaW5lciBkcm9wcGFibGUgYW5kIGNoaWxkcmVuIGRyYWdnYWJsZS5cbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERyb3BwYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBkcmFrZXNTZXJ2aWNlO1xuICAgIG1vZGVsOiBhbnk7XG4gICAgY29weTogYm9vbGVhbjtcbiAgICByZW1vdmVPblNwaWxsOiBib29sZWFuO1xuICAgIG5neERyb3BwYWJsZTogc3RyaW5nO1xuICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJyB8ICdtaXhlZCc7XG4gICAgZHJvcDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZHJhZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3ZlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3V0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZW1vdmU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNhbmNlbDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVhZG9ubHkgY29udGFpbmVyOiBhbnk7XG4gICAgZHJvcFpvbmU6IHN0cmluZztcbiAgICBkZWZhdWx0Wm9uZTogc3RyaW5nO1xuICAgIF9kcm9wWm9uZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBkcmFrZXNTZXJ2aWNlOiBEcmFrZVN0b3JlU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19