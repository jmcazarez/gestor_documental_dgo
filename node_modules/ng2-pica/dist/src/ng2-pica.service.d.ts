import { Observable } from 'rxjs';
import { ImgExifService } from './img-exif.service';
import * as ɵngcc0 from '@angular/core';
export interface ResizeCanvasOptions {
    quality?: number;
    alpha?: boolean;
    unsharpAmount?: number;
    unsharpRadius?: number;
    unsharpThreshold?: number;
}
export interface ResizeBufferOptions {
    src: Uint8Array;
    width: number;
    height: number;
    toWidth: number;
    toHeight: number;
    quality?: number;
    alpha?: boolean;
    unsharpAmount?: number;
    unsharpRadius?: number;
    unsharpThreshold?: number;
}
export declare class Ng2PicaService {
    private imageExifService;
    constructor(imageExifService: ImgExifService);
    resize(files: File[], width: number, height: number, keepAspectRatio?: boolean): Observable<any>;
    resizeCanvas(from: HTMLCanvasElement, to: HTMLCanvasElement, options: ResizeCanvasOptions): Promise<HTMLCanvasElement>;
    resizeBuffer(options: ResizeBufferOptions): Promise<Uint8Array>;
    private resizeFile(file, width, height, keepAspectRatio?);
    private isImgUsingAlpha(imageData);
    private generateResultFile(blob, name, type, lastModified);
    private blobToFile(blob, name, lastModified);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Ng2PicaService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Ng2PicaService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXBpY2Euc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJuZzItcGljYS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW1nRXhpZlNlcnZpY2UgfSBmcm9tICcuL2ltZy1leGlmLnNlcnZpY2UnO1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2l6ZUNhbnZhc09wdGlvbnMge1xyXG4gICAgcXVhbGl0eT86IG51bWJlcjtcclxuICAgIGFscGhhPzogYm9vbGVhbjtcclxuICAgIHVuc2hhcnBBbW91bnQ/OiBudW1iZXI7XHJcbiAgICB1bnNoYXJwUmFkaXVzPzogbnVtYmVyO1xyXG4gICAgdW5zaGFycFRocmVzaG9sZD86IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc2l6ZUJ1ZmZlck9wdGlvbnMge1xyXG4gICAgc3JjOiBVaW50OEFycmF5O1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgdG9XaWR0aDogbnVtYmVyO1xyXG4gICAgdG9IZWlnaHQ6IG51bWJlcjtcclxuICAgIHF1YWxpdHk/OiBudW1iZXI7XHJcbiAgICBhbHBoYT86IGJvb2xlYW47XHJcbiAgICB1bnNoYXJwQW1vdW50PzogbnVtYmVyO1xyXG4gICAgdW5zaGFycFJhZGl1cz86IG51bWJlcjtcclxuICAgIHVuc2hhcnBUaHJlc2hvbGQ/OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmcyUGljYVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBpbWFnZUV4aWZTZXJ2aWNlO1xyXG4gICAgY29uc3RydWN0b3IoaW1hZ2VFeGlmU2VydmljZTogSW1nRXhpZlNlcnZpY2UpO1xyXG4gICAgcmVzaXplKGZpbGVzOiBGaWxlW10sIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBrZWVwQXNwZWN0UmF0aW8/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcmVzaXplQ2FudmFzKGZyb206IEhUTUxDYW52YXNFbGVtZW50LCB0bzogSFRNTENhbnZhc0VsZW1lbnQsIG9wdGlvbnM6IFJlc2l6ZUNhbnZhc09wdGlvbnMpOiBQcm9taXNlPEhUTUxDYW52YXNFbGVtZW50PjtcclxuICAgIHJlc2l6ZUJ1ZmZlcihvcHRpb25zOiBSZXNpemVCdWZmZXJPcHRpb25zKTogUHJvbWlzZTxVaW50OEFycmF5PjtcclxuICAgIHByaXZhdGUgcmVzaXplRmlsZShmaWxlLCB3aWR0aCwgaGVpZ2h0LCBrZWVwQXNwZWN0UmF0aW8/KTtcclxuICAgIHByaXZhdGUgaXNJbWdVc2luZ0FscGhhKGltYWdlRGF0YSk7XHJcbiAgICBwcml2YXRlIGdlbmVyYXRlUmVzdWx0RmlsZShibG9iLCBuYW1lLCB0eXBlLCBsYXN0TW9kaWZpZWQpO1xyXG4gICAgcHJpdmF0ZSBibG9iVG9GaWxlKGJsb2IsIG5hbWUsIGxhc3RNb2RpZmllZCk7XHJcbn1cclxuIl19